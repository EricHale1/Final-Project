import pickle
from numpy import array

ACTIONS = ("move", "search", "grab", "use", "inventory", "save", "load", "quit")

room_names = ["road", "booth", "armory", "barracks", "hospital"]

class Player():
	def __init__(self):
		self.inventory = []
		self.position = 0
		print("Your head is throbbing from a previous injury.\nYou are on a dusty, vacant road. It doesn't seem like there's much to do here. ")

	def show_inventory(self):
		print(f'Your inventory: {self.inventory}')
	
class Rooms():
	def __init__(self):
		self.room_items = []
		self.usable_items = []
		self.use_descriptions = {}
		self.searchable_items = []
		self.searched_items = []
		self.search_descriptions = {}
		self.gate_open = False
		self.box_open = False
		self.computer_searched = False

	def search(self, player):
		if self.searchable_items:
			to_search = input("What do you want to search?\n").lower()	
			if to_search in self.searchable_items:
				print(self.search_descriptions[to_search])

				if to_search == "filing cabinet":
					if "papers" not in self.searched_items:
						self.room_items.append("papers")
						self.searched_items.append("papers")

				if to_search == 'control panel':
					if "keycard" not in self.searched_items:
						self.searched_items.append("keycard")

				if to_search == "computer":
					username = input("What is the username?\n").lower()
					if username == "jimmy mcgill":
						print("Suddenly, a series of numbers appear on the screen: 14761.")
						self.computer_searched = True

				if to_search == "locker":
						code = input("What is the code to open the locker?\n")
						if code == "14761":
							if "wallet" in player.inventory:
								if "key" in player.inventory:
									if self.box_open == False:
										print("You pull open the rusty locker and find a wallet and a key resting on the shelves.\nThere is a photo of a familiar child in the wallet.")
										self.searched_items.append("key")
										self.searched_items.append("wallet")
										armory_room.room_items.append("wallet")
										armory_room.room_items.append("key")
									else:
										print("You pull open the rusty locker and find a wallet resting on the shelves.\nThere is a photo of a familiar child in the wallet.")
							else:
								print("You pull open the rusty locker and find a key resting on a shelf.")
						else:
							print("That wasn't the correct code!")

				if to_search == "shelf":
					if "canned peaches" not in self.searched_items:
						self.searched_items.append("canned peaches")
						self.room_items.append("canned peaches")

				if to_search == "suitcase":
					self.searched_items.append("suitcase")

				if to_search == "jacket":
					self.searched_items.append("change")
				
			else:
				print(f"That item can't be searched. You could look through these:\n{self.searchable_items}")
		else:
			print("You can't search anything here.")

	def grab_item(self, player):
		to_grab = input("What item do you want to get?\n").lower()
		if to_grab in self.room_items:
			if to_grab in self.searched_items:
				print(f"{to_grab} added to inventory")
				player.inventory.append(to_grab)
				self.room_items.remove(to_grab)
			else:
				print(f"You haven't found a {to_grab} yet.")
		else:
			print(f'"{to_grab}" is not accessible')
	
	def use_item(self, player):
		print(f"Your inventory: {player.inventory}")
		use = input("What item do you want to use?\n").lower()
		if use in player.inventory:
			if use in self.usable_items:
				player.inventory.remove(use)
				print(self.use_descriptions[use])
				if use == "keycard":
					self.gate_open = True
				if use == "key":
						self.box_open = True
			else:
				print(f"The {use} cannot be used here.")
		else:
			print(f"{use} is not in your inventory!")

	def movement(self, player, rooms):
		print(f'You can go to these rooms: {room_names}')
		go = input("Where do you want to go?\n")
		if go in rooms:
			if go == "road":
				player.position = 0
			if go == "booth":
				player.position = 1
			if go == "armory":
				player.position = 2
			if go == "barracks":
				player.position = 3
			if go == "hospital":
				player.position = 4
		else:
			print(f'{go} is not a valid room.')
		
		#Descriptions
		if player.position == 0:
			print("You are on a dusty, vacant road. It doesn't seem like there's much to do here.")
		#Road
		elif player.position == 1:
			print("You enter a small, dusty guard's booth that seems familiar. You notice a control panel ahead of you and a filing cabinet on your left.")
		#Booth
		elif player.position == 2:
			print("You enter an armory that has a section locked behind a gate. There's a tall shelf stocked with boxes on your right.")
		#Armory
		elif player.position == 3:
			print("You enter a large barracks room that was evacuated quickly. The beds aren't made and personal belongings are strewn about.\nThere's a jacket hanging on someone's bedframe, a suitcase resting under somebody's bed, and a strange box sitting in the back of the room.")
		#Barracks
		elif player.position == 4:
			print("You enter a run-down makeshift hospital that has been looted.\nThere's a computer in the corner of the room and some bandages on an adjacent table.")

def player_input():
	response = ''
	while response.lower() not in ACTIONS:
		print(f'Actions: {ACTIONS}')
		response = input("What do you want to do?\n")
	return response

def save():
	with open("game.dat", "wb") as f:
		pickle.dump(player, f)
		pickle.dump(rooms, f)
		pickle.dump(hospital_room, f)
		pickle.dump(booth_room, f)
		pickle.dump(armory_room, f)
		pickle.dump(barracks_room, f)
	print("Your game has been saved.")

def load():
	global player
	global rooms
	global hospital_room
	global booth_room
	global armory_room
	global barracks_room
	try:
		with open ("game.dat", "rb") as f:
			player = pickle.load(f)
			rooms = pickle.load(f)
			hospital_room = pickle.load(f)
			booth_room = pickle.load(f)
			armory_room = pickle.load(f)
			barracks_room = pickle.load(f)
		print("Your game has been loaded.")
	except FileNotFoundError:
		print("You don't have a game file saved.")

rooms = {}

road_room = Rooms()
rooms["road"] = road_room

hospital_room = Rooms()
hospital_room.searchable_items.append("computer")
hospital_room.search_descriptions["computer"] = "You move the mouse of the computer and the screen flashes to life. You are prompted by a question:"
hospital_room.room_items.append("bandages")
hospital_room.searched_items.append("bandages")
rooms["hospital"] = hospital_room

booth_room = Rooms()
booth_room.room_items.append("keycard")
booth_room.searchable_items.append("control panel")
booth_room.searchable_items.append("filing cabinet")
booth_room.search_descriptions["filing cabinet"] = "You search through the drawers of the filing cabinet and find nothing but some old papers."
rooms["booth"] = booth_room

armory_room = Rooms()
armory_room.searchable_items.append("shelf")
armory_room.searchable_items.append("gate")

rooms["armory"] = armory_room

barracks_room = Rooms()
barracks_room.searchable_items.append("suitcase")
barracks_room.searchable_items.append("jacket")
barracks_room.searchable_items.append("box")
barracks_room.search_descriptions["notebook"] = 'You leaf through the pages of the notebook and find a hurried journal entry reading, "Enemy is closing in. Leaving soon."' 
barracks_room.search_descriptions["suitcase"] = 'You zip open the suitcase and find a notebook resting on top of some clothes.'
barracks_room.search_descriptions["jacket"] = 'You feel through the pockets of the jacket and find some change and a dog tag with the name "Jimmy McGill" embedded on it.'
barracks_room.search_descriptions["box"] = "The box is locked shut. Maybe you could find a key."
barracks_room.use_descriptions["key"] = "You use the key to unlock the keyhole in the box."
rooms["barracks"] = barracks_room


def leftover(armory_room, barracks_room, booth_room, player):
	if "keycard" in booth_room.searched_items:
		booth_room.search_descriptions["control panel"] = "You run your hands over the switches and feel a sense of deja vu."
		armory_room.usable_items.append("keycard")
		armory_room.use_descriptions["keycard"] = "You slide the keycard through the scanner and the gate clicks open. You enter the locked room and see a rusty locker on your left."
	else:
		booth_room.search_descriptions["control panel"] = "You run your hands over the switches and feel a small keycard lodged in a crevice."

	if "suitcase" in barracks_room.searched_items:
		barracks_room.searchable_items.append("notebook")

	if "change" in barracks_room.searched_items:
		if "change" not in player.inventory:
			barracks_room.room_items.append("change")

	if "canned peaches" not in armory_room.searched_items:
		armory_room.search_descriptions["shelf"] = "You open a few boxes on the shelf and find a stock of canned peaches."
	else:
		armory_room.search_descriptions["shelf"] = "There are a few empty, open boxes on the shelf."

	if armory_room.gate_open == True:
		armory_room.searchable_items.append("locker")
		armory_room.search_descriptions["locker"] = "You see that the locker is locked with a combination lock. Maybe you can find a code."
		armory_room.search_descriptions["gate"] = "The gate to the locked section is open."
	else: 
		armory_room.search_descriptions["gate"] = "You notice that the gate has a keycard scanner. Maybe you could find something to open it."
	
	if "key in player.inventory":
		barracks_room.usable_items.append("key")
	
	if barracks_room.box_open == True:
		print("Well done! You have found the things that remind you of your past. You won!")
	return armory_room, barracks_room, booth_room

player = Player()
def main(player):
	choice = ''

	while choice != "quit":
		#Player position setup
		r = ''
		if player.position == 0:
			r = 'road'
		#Road
		elif player.position == 1:
			r = 'booth'
		#Booth
		elif player.position == 2:
			r = 'armory'
		#Armory
		elif player.position == 3:
			r = 'barracks'
		#Barracks
		elif player.position == 4:
			r = "hospital"

		rooms[r].usable_items.append("canned peaches")
		rooms[r].use_descriptions["canned peaches"] = "You eat the can of peaches and feel rejuvinated."

		choice = player_input()
		if choice == "quit":
			print("Thank you for playing!")
		elif choice == "save":
			save()
		elif choice == "load":
			load()
		elif choice == "move":
			rooms[r].movement(player, rooms)
		elif choice == "search":
			rooms[r].search(player)
		elif choice == "grab":
			rooms[r].grab_item(player)
		elif choice == "use":
			rooms[r].use_item(player)
		elif choice == "inventory":
			player.show_inventory()

		leftover(armory_room, barracks_room, booth_room, player)
if __name__ == "__main__":
	main(player)